<center>***Aitor Domingo Machado Velázquez***</center>
<center>***2º ASIR***</center>


<center>![](./logo_centro.png)</center>

#Acceso remoto SSH

##0.1 Introducción

Vamos a necesitar las siguientes 3 MVs:

- Un servidor GNU/Linux OpenSUSE, con IP estática (172.18.XX.53).

    ![](./1.png)
    
- Un cliente GNU/Linux OpenSUSE, con IP estática (172.18.XX.54).

    ![](./2.png)
    
- Un cliente Windows7, con IP estática (172.18.XX.13). 

    ![](./3.png)

##0.2 Configuración de red
Para configurar la red en OpenSUSE lo más cómodo es usar el interfaz gráfico `yast`.

- Vamos a `yast -> Ajustes de red`
- En la pestaña `Vista resumen` pondremos:
    - IP estática
    - Máscara de red
    - Nombre de host
    - Pulsamos en `siguiente`.    
- En la pestaña `Nombres de hosts` pondremos:
    - Nombre de host
    - Nombre de dominio
    - Asignar nombre a bucle local. Esto modifica el fichero `/etc/hosts` por nosotros.
    - Servidor DNS    
- En la pestaña `Encaminamiento` pondremos:
    - La IP de la puerta de enlace.
    - Elegimos el dispositivo de red asociado a la puerta de enlace.    
        - OpenSuse Servidor:    
        ![](./4.png)

        - OpenSuse Cliente:
        
            ![](./5.png)

#1. Preparativos

##1.1 Servidor SSH

- Configurar el servidor GNU/Linux con siguientes valores:
    - Nombre de usuario: nombre-del-alumno
    - Clave del usuario root: DNI-del-alumno
    - Nombre de equipo: ssh-server
    - Nombre de dominio: segundo-apellido-del-alumno
    
- Añadir en /etc/hosts los equipos ssh-client1 y ssh-client2-XX (Donde XX es el puesto del alumno).

    ![](./7.png)

- Para comprobar los cambios ejecutamos varios comandos. Capturar imagen:

ip a (Comprobar IP y máscara)

![](./8.png)

route -n (Comprobar puerta de enlace)

![](./9.png)

host www.google.es (Comprobar el servidor DNS)

![](./10.png)

lsblk (Comprobar particiones)

![](./11.png)

blkid (Comprobar UUID de la instalación)

![](./12.png)

- Crear los siguientes usuarios en ssh-server:
    - primer-apellido-del-alumno1
    - primer-apellido-del-alumno2
    - primer-apellido-del-alumno3
    - primer-apellido-del-alumno4    
        ![](./13.png)

##1.2 Cliente GNU/Linux

- Configurar el cliente1 GNU/Linux con los siguientes valores:
    - Nombre de usuario: nombre-del-alumno
    - Clave del usuario root: DNI-del-alumno
    - Nombre de equipo: ssh-client1
    - Nombre de dominio: segundo-apellido-del-alumno
- Añadir en /etc/hosts el equipo ssh-server, y ssh-client2-XX.

    ![](./14.png)

- Comprobar haciendo ping a ambos equipos. 
    - OpenSuse Servidor:
    
        ![](./15.png)
    
    - Windows 7: 
    
         ![](./16.png)

##1.3 Cliente Windows

- Instalar software cliente SSH en Windows (PuTTY)

    ![](./17.png)  

- Configurar el cliente2 Windows con los siguientes valores:
    - Nombre de usuario: nombre-del-alumno
    - Clave del usuario administrador: DNI-del-alumno
    - Nombre de equipo: ssh-client2-XX
    
        - ![](./6.png)     
           
- Añadir en `C:\Windows\System32\drivers\etc\hosts` el equipo ssh-server y ssh-client1.
        - ![](./18.png) 

- Comprobar haciendo ping a ambos equipos.
    - OpenSuse Servidor:
    
        ![](./19.png)   
      
      
    - OpenSuse Cliente:
    
        ![](./20.png)     

#2 Instalación del servicio SSH

- Instalar el servicio SSH en la máquina ssh-server
    - Desde la herramienta `yast -> Instalar Software`
    - Desde terminal `zypper search ssh` muestra los paquetes instalados o no con nombre ssh*.
    
        ![](./21.png) 
        
    - Desde terminal `zypper install openssh`, instala el paquete OpenSSH.

Los ficheros de configuración del servicio se guardan en /etc/ssh.

##2.1 Comprobación

- Desde el propio **ssh-server**, verificar que el servicio está en ejecución.

    systemctl status sshd  (Esta es la forma de comprobarlo en *systemd*) 
    
    ![](./22.png)

    ps -ef|grep sshd       (Esta es la forma de comprobarlo mirando los procesos del sistema)
    
    ![](./23.png)

- Para poner el servicio enable: `systemctl enable sshd`, si no lo estuviera.
- `netstat -ntap`: Comprobar que el servicio está escuchando por el puerto 22

    ![](./24.png)

##2.2 Primera conexión SSH desde cliente

- Comprobamos la conectividad con el servidor desde el cliente con `ping ssh-server`.

    ![](./25.png)
 
- Desde el cliente comprobamos que el servicio SSH es visible con `nmap ssh-server`. Debe mostrarnos que el puerto 22 está abierto. Esto es, debe aparecer una línea como  "22/tcp open  ssh".

    ![](./26.png)

    ![](./27.png)


Si esto falla debemos comprobar en el servidor la configuración del cortafuego.


- Vamos a comprobar el funcionamiento de la conexión SSH desde cada cliente usando el usuario *1er-apellido-alumno1*.

    ![](./28.png)
 
- Desde el **ssh-client1** nos conectamos mediante `ssh 1er-apellido-alumno11@ssh-server`. Capturar imagen del intercambio de claves que se produce en el primer proceso de conexión SSH.
![](./29.png)

- Si nos volvemos a conectar tendremos:

    ![](./30.png)

- Comprobar contenido del fichero `$HOME/.ssh/known_hosts` en el equipo ssh-client1. OJO si el prompt
pone *ssh-server* están el el servidor, y si pone *ssh-client1* están el el cliente1.

    ![](./31.png)

    ![](./32.png)

- ¿Te suena la clave que aparece? Es la clave de identificación de la máquina ssh-server.

##2.3 ¿Y si cambiamos las claves del servidor?

- Confirmar que existen los siguientes ficheros en `/etc/ssh`, 
Los ficheros `ssh_host*key` y `ssh_host*key.pub`, son ficheros de clave pública/privada
que identifican a nuestro servidor frente a nuestros clientes:

    ![](./33.png)

- Modificar el fichero de configuración SSH (`/etc/ssh/sshd_config`) para dejar una única línea: 
`HostKey /etc/ssh/ssh_host_rsa_key`. Comentar el resto de líneas con configuración HostKey. 
Este parámetro define los ficheros de clave publica/privada que van a identificar a nuestro
servidor. Con este cambio decimos que sólo vamos a usar las claves del tipo RSA.

    ![](./34.png)

- Generar nuevas claves de equipo en **ssh-server**. Como usuario root ejecutamos: 
`ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key`. Estamos cambiando o volviendo a 
generar nuevas claves públicas/privadas para la identificación de nuestro servidor.

    ![](./35.png)

- Reiniciar el servicio SSH: `systemctl restart sshd`.
- Comprobar que el servicio está en ejecución correctamente: `systemctl status sshd`

    ![](./36.png)   

- Comprobar qué sucede al volver a conectarnos desde los dos clientes, usando los 
usuarios 1er-apellido-alumno2 y 1er-apellido-alumno1. ¿Qué sucede?

    - OpenSuse Cliente:
        
        ![](./37.png)
        
    - Windows 7 Cliente:
        
        ![](./63.png)
        
#3. Personalización del prompt Bash

Personalizar Bash según la documentación, para cambiar el color cuando tenemos activa una sesión SSH.

- Por ejemplo, podemos añadir las siguientes líneas al fichero de configuración 
del usuario1 en la máquina servidor (Fichero /home/1er-apellido-alumno1/.bashrc)

- ***Cambia el prompt al conectarse vía SSH***

    ![](./38.png)

- Además, crear el fichero `/home/1er-apellido-alumno1/.alias` con el siguiente contenido:
    
    ![](./39.png)

- Comprobar funcionamiento de la conexión SSH desde cada cliente.
    
    ![](./40.png)

#4. Autenticación mediante claves públicas

El objetivo de este apartado es el de configurar SSH para poder acceder desde el cliente1,
usando el usuario4 sin poner password, pero usando claves pública/privada.

Vamos a configurar la autenticación mediante clave pública para acceder con 
nuestro usuario personal desde el equipo cliente al servidor con el usuario 1er-apellido-alumno4.

- Vamos a la máquina cliente1. 
- ¡OJO! No usar el usuario root.

Capturamos imágenes de los siguientes pasos:

- Iniciamos sesión con nuestro usuario *nombre-alumno* de la máquina ssh-client1.

    ![](./41.png)   

- Ejecutamos `ssh-keygen -t rsa` para generar un nuevo par de claves para el usuario en `/home/nuestro-usuario/.ssh/id_rsa` y `/home/nuestro-usuario/.ssh/id_rsa.pub`.
    
    ![](./42.png)

- Ahora vamos a copiar la clave pública (id_rsa.pub) del usuario (nombre-de-alumno)de la máquina cliente, 
al fichero "authorized_keys" del usuario *remoteuser4* en el servidor. Hay dos formas de hacerlo: 
    * Modo 1. Usando un comando específico para ello `ssh-copy-id remoteuser4@ssh-server`
    
        ![](./43.png)
    
    * Modo 2. Usando el programa de copia segura `scp`:
        * Comprobar que existe el directorio /home/remoteuser4/.ssh en el servidor.
        * Hacemos `scp .ssh/id_rsa.pub remoteuser4@ssh-server:.ssh/authorized_keys`.
* Comprobar que ahora podremos acceder remotamente, sin escribir el password desde el cliente1.

        ![](./44.png)

* Comprobar que al acceder desde cliente2, si nos pide el password.

    ![](./46.png)

#5. Uso de SSH como túnel para X

- Instalar en el servidor una aplicación de entorno gráfico (APP1) que no esté en los clientes. 
Por ejemplo Geany. Si estuviera en el cliente entonces buscar otra aplicación o desinstalarla en el cliente.
![](./47.png)

- Modificar servidor SSH para permitir la ejecución de aplicaciones gráficas, desde los clientes. 
Consultar fichero de configuración `/etc/ssh/sshd_config` (Opción `X11Forwarding yes`)
![](./48.png)

- Comprobar funcionamiento de APP1 desde cliente1. Por ejemplo, con el comando `ssh -X remoteuser1@ssh-server`, podemos conectarnos de forma remota al servidor, y ahora ejecutamos APP1 de forma remota.
![](./49.png)


#6. Aplicaciones Windows nativas

- Podemos tener aplicaciones Windows nativas instaladas en ssh-server mediante el emulador WINE.
- Instalar emulador Wine en el ssh-server.
    
    ![](./50.png)

- Ahora podríamos instalar alguna aplicación (APP2) de Windows en el servidor SSH usando el emulador Wine. O podemos usar el Block de Notas que viene con Wine: wine notepad.

- Comprobar el funcionamiento de APP2 en ssh-server.

    ![](./51.png)

- Comprobar funcionamiento de APP2, accediendo desde ssh-client1.

    ![](./52.png)

#7. Restricciones de uso
Vamos a modificar los usuarios del servidor SSH para añadir algunas restricciones de uso del servicio.

##7.1 Sin restricción (tipo 1)
Usuario sin restricciones:

- El usuario 1er-apellido-alumno1, podrá conectarse vía SSH sin restricciones.
- En principio no es necesario tocar nada.

##7.2 Restricción total (tipo 2)
Vamos a crear una restricción de uso del SSH para un usuario:

- En el servidor tenemos el usuario remoteuser2. Desde local en el servidor podemos usar sin problemas el usuario.
- Vamos a modificar SSH de modo que al usar el usuario por ssh desde los clientes tendremos permiso denegado.

Capturamos imagen de los siguientes pasos:

- Consultar/modificar fichero de configuración del servidor SSH (`/etc/ssh/sshd_config`) para 
restringir el acceso a determinados usuarios. Consultar las opciones `AllowUsers`, `DenyUsers`. 
![](./53.png)

- Comprobarlo la restricción al acceder desde los clientes.

    - OpenSuse Cliente:
        
        ![](./54.png)
        
    - Windows 7 Cliente:
        
        ![](./55.png)
        

##7.3 Restricción en las máquinas (tipo 3)
Vamos a crear una restricción para que sólo las máquinas clientes con las IP's 
autorizadas puedan acceder a nuestro servidor.

* Consultar los ficheros de configuración /etc/hosts.allow y /etc/hosts.deny
```
# /etc/hosts.allow
# Permitir acceso a las IP's conocidas
sshd : 172.19.255.53/255.255.255.0 : ALLOW
```

```
# /etc/hosts.deny
# Denegar acceso al servicio SSH a todas las IP's 
sshd : ALL EXCEPT LOCAL
```

* Modificar configuración en el servidor para denegar accesos de todas las máquinas, excepto nuestros clientes.
* Comprobar su funcionamiento.

##7.4 Restricción sobre aplicaciones (tipo 4)
Vamos a crear una restricción de permisos sobre determinadas aplicaciones.

- Usaremos el usuario remoteuser4
- Crear grupo remoteapps
- Incluir al usuario en el grupo.

    ![](./56.png)
                
- Localizar el programa APP1. Posiblemente tenga permisos 755.
- Poner al programa APP1 el grupo propietario a remoteapps

    ![](./58.png)

- Poner los permisos del ejecutable de APP1 a 750. Para impedir que los que no pertenezcan al grupo puedan ejecutar el programa.

    ![](./57.png)

- Comprobamos el funcionamiento en el servidor.

    ![](./59.png)

    ![](./60.png)

- Comprobamos el funcionamiento desde el cliente.

    ![](./61.png)
    
    ![](./62.png)